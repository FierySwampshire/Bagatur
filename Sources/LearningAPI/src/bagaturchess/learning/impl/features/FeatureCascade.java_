package bagaturchess.learning.impl.features;



public class FeatureCascade extends FeatureArray {

	/**
	 * 
	 */
	private static final long serialVersionUID = 6180608713478121595L;
	
	private boolean growing;
	
	public FeatureCascade(int _id, String _name, int _complexity,
			double[] _ovals, double[] _evals) {
		this(_id, _name, _complexity, _ovals, _ovals, _ovals, _evals, _evals, _evals, true);
	}

	public FeatureCascade(int _id, String _name, int _complexity,
			double[] _ovals, double[] _evals, boolean _growing) {
		this(_id, _name, _complexity, _ovals, _ovals, _ovals, _evals, _evals, _evals, _growing);
	}

	public FeatureCascade(int _id, String _name, int _complexity,
			double[] _omin, double[] _omax, double[] oinitial,
			double[] _emin, double[] _emax, double[] einitial) {
		this(_id, _name, _complexity, _omin, _omax, oinitial, _emin, _emax, einitial, true);
	}
	
	public FeatureCascade(int _id, String _name, int _complexity,
			double[] _omin, double[] _omax, double[] oinitial,
			double[] _emin, double[] _emax, double[] einitial, boolean _growing) {
		super(_id, _name, _complexity, _omin, _omax, oinitial, _emin, _emax, einitial);
		growing = _growing;
	}
	
	public void correct() {
		for(int i=1; i<o_weights.length; i++) {
			if (growing) {
				//if (o_weights[i - 1].getAverage() > o_weights[i].getAverage()) {
				o_weights[i].makeAtLeast(o_weights[i - 1]);
				//}
			} else {
				o_weights[i].makeAtMost(o_weights[i - 1]);
				//throw new UnsupportedOperationException();
				/*if (o_weights[i - 1].getAverage() < o_weights[i].getAverage()) {
					o_weights[i].setAverage(o_weights[i - 1].getAverage());
					o_weights[i].setWeight(o_weights[i - 1].getWeight());
				}*/
			}
		}
		
		for(int i=1; i<e_weights.length; i++) {
			if (growing) {
				//if (e_weights[i - 1].getAverage() > e_weights[i].getAverage()) {
				e_weights[i].makeAtLeast(e_weights[i - 1]);
				//}
			} else {
				e_weights[i].makeAtMost(e_weights[i - 1]);
				//throw new UnsupportedOperationException();
				/*if (e_weights[i - 1].getAverage() < e_weights[i].getAverage()) {
					e_weights[i].setAverage(e_weights[i - 1].getAverage());
					e_weights[i].setWeight(e_weights[i - 1].getWeight());
				}*/
			}
		}
	}
	
	/*public void adjust(ISignal signal, double amount, double openningPart, int depth) {
		SignalArray signalpst = (SignalArray)signal;
		
		int count = signalpst.getSubsignalsCount();
		int[] ids = signalpst.getSubIDs();
		double[] strengths = signalpst.getSubsignals();
		
		for(int i=0; i<count; i++) {
			double adjustment = amount * (strengths[i] / signalpst.getRange());
			double adjustment_o = openningPart * adjustment;
			double adjustment_e = (1 - openningPart) * adjustment;

			adjust(ids[i], adjustment_o, 1, depth);
			adjust(ids[i], adjustment_e, 0, depth);

			//if ((growing && adjustment_o > 0) || (!growing && adjustment_o < 0)) {
				for(int j=ids[i] + 1; j<o_weights.length; j++) {
					adjust(j, adjustment_o, 1, depth);
				}
			//}
			//if ((growing && adjustment_e > 0) || (!growing && adjustment_e < 0)) {
				for(int j=ids[i] + 1; j<e_weights.length; j++) {
					adjust(j, adjustment_e, 0, depth);
				}
			//}
		}
	}*/
}
